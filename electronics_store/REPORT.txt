
========================
Раздел: Каталог и страница товара
========================

Цель
- Реализовать каталог с серверной фильтрацией по категориям (лазерные/струйные/термо‑принтеры), серверной сортировкой (по новизне, году, наименованию, цене) и показом только товаров «в наличии».
- Реализовать страницу карточки товара с фото, ценой и характеристиками (страна, год, модель) и кнопкой «В корзину».

Что сделано
1) Добавлены модели каталога (`main/models.py`):
   - `Category(slug, name)` — уникальные слаги для фильтрации; отображаемое имя.
   - `Product(category, name, slug, price, year, country, model, image, in_stock, created_at)`
     • `in_stock` управляет показом (только True попадает в каталог)  
     • `ordering = ['-created_at']` — по умолчанию сортировка по новизне.

2) Админка (`main/admin.py`):
   - Регистрация `Category` и `Product`, автозаполнение `slug` из `name`, фильтры/поиск.

3) Представления (`main/views.py`):
   - `catalog(request)` — серверная фильтрация и сортировка.
     • Фильтр по категории: `?category=<slug>`  
     • Сортировка: `?sort=year|name|price`; по умолчанию новизна.  
     • Всегда добавлено условие `in_stock=True`.
   - `product_detail(request, slug)` — показ карточки по слагу; 404 если товара нет или `in_stock=False`.

4) Маршруты (`main/urls.py`):
   - Добавлен `path('product/<slug:slug>/', views.product_detail, name='product_detail')`.

5) Шаблоны:
   - `templates/catalog.html` — динамический список категорий и сортировок (через GET‑ссылки), карточки товаров с ценой и ссылкой «Подробнее».
   - `templates/product_detail.html` — фото, наименование, цена, характеристики, кнопка «В корзину». Минимум JS (отсутствует бизнес‑логика на клиенте).

Как это работает
- Категории в сайдбаре: ссылки вида `/catalog/?category=laser`. Активная категория подсвечивается.
- Сортировка: ссылки вида `/catalog/?sort=price` (совмещается с категорией — `/catalog/?sort=price&category=laser`).
- По умолчанию без параметров пользователь видит новинки (ORDER BY `created_at` DESC) и только товары в наличии.
- Карточка товара доступна по ссылке `/product/<slug>/`.

Ключевой код (сокращённо)
main/models.py:
    class Category(models.Model):
        slug = models.SlugField(max_length=50, unique=True)
        name = models.CharField(max_length=100, unique=True)

    class Product(models.Model):
        category = models.ForeignKey(Category, on_delete=models.PROTECT, related_name='products')
        name = models.CharField(max_length=200)
        slug = models.SlugField(max_length=220, unique=True)
        price = models.DecimalField(max_digits=10, decimal_places=2)
        year = models.PositiveSmallIntegerField()
        country = models.CharField(max_length=100)
        model = models.CharField(max_length=100)
        image = models.ImageField(upload_to='products/', blank=True, null=True)
        in_stock = models.BooleanField(default=True)
        created_at = models.DateTimeField(auto_now_add=True)

main/views.py (фрагменты):
    def catalog(request):
        qs = Product.objects.filter(in_stock=True)
        category_slug = request.GET.get('category')
        if category_slug:
            active_category = Category.objects.filter(slug=category_slug).first()
            if active_category:
                qs = qs.filter(category=active_category)
        sort = request.GET.get('sort')
        sort_map = {'year': 'year', 'name': 'name', 'price': 'price'}
        qs = qs.order_by(sort_map.get(sort, '-created_at'))
        return render(request, 'catalog.html', {
            'products': qs.select_related('category'),
            'categories': Category.objects.all(),
            'active_category': active_category if category_slug else None,
            'active_sort': sort or 'new',
        })

    def product_detail(request, slug):
        product = Product.objects.filter(slug=slug, in_stock=True).select_related('category').first()
        if not product:
            raise Http404('Товар не найден или отсутствует в наличии')
        return render(request, 'product_detail.html', { 'product': product })

main/urls.py (фрагмент):
    path('product/<slug:slug>/', views.product_detail, name='product_detail')

templates/catalog.html (суть):
    - Сайдбар: список категорий и блок сортировки — обычные ссылки с GET‑параметрами
    - Сетка карточек: изображение (если нет — статика‑заглушка), название (ссылка на карточку), цена

templates/product_detail.html (суть):
    - Крупное фото, заголовок, цена
    - Характеристики: категория, страна, год, модель
    - Кнопка «В корзину» (без JS‑логики)

Инструкция по запуску/эксплуатации
1) Миграции:
   > .\venv\Scripts\Activate.ps1
   > python manage.py makemigrations
   > python manage.py migrate

2) В админке `/admin/` создайте категории:
   - лазерные принтеры → slug: laser
   - струйные принтеры → slug: inkjet
   - термопринтеры → slug: thermo

3) Добавьте товары и отметьте «В наличии», при необходимости загрузите изображение.

4) Проверка:
   - Каталог: `/catalog/` — по умолчанию новинки; меняйте сортировку и категорию через ссылки слева
   - Карточка товара: переход по клику на название или кнопку «Подробнее»

Примечания
- Используется минимум JavaScript: все фильтры и сортировки реализованы на сервере через GET‑параметры.
- В шаблонах предусмотрены заглушки изображений, если фото не загружено.



